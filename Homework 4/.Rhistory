x1.ci <- densityLogFit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=densityLogFit$df.residual)
densityLog.predict.upper = intercept.ci[1]+x1.ci[1]*densityLog.seq
lines(densityLog.seq,densityLog.predict.upper, col="red")
densityLog.predict.lower = intercept.ci[2]+x1.ci[2]*densityLog.seq
lines(densityLog.seq,densityLog.predict.lower, col="red")
idpu = exp(densityLog.predict)-densityLogFit$coefficients[1]/densityLogFit$coefficients[2]
idpu1 = exp(densityLog.predict.upper)-intercept.ci[1]/x1.ci[1]
idpu2 = exp(densityLog.predict.lower)-intercept.ci[2]/x1.ci[2]
your.number = 38.6
densityLog.seq[which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))]
densityLog.seq[which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))]
your.number = 426.7
which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))
which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))
densityLog.seq[which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))]
densityLog.seq[which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))]
idpu
idpu[9000000]
your.number = 2.63
densityLog.seq[which(abs(densityLog.predict.lower-your.number)==min(abs(densityLog.predict.lower-your.number)))]
densityLog.seq[which(abs(densityLog.predict.upper-your.number)==min(abs(densityLog.predict.upper-your.number)))]
which(abs(densityLog.predict.lower-your.number)==min(abs(densityLog.predict.lower-your.number)))
which(abs(densityLog.predict.upper-your.number)==min(abs(densityLog.predict.upper-your.number)))
densityLog.seq[which(abs(densityLog.predict.lower-your.number)==min(abs(densityLog.predict.lower-your.number)))]
densityLog.seq[which(abs(densityLog.predict.upper-your.number)==min(abs(densityLog.predict.upper-your.number)))]
densityLog.predict.upper
densityLog.predict
densityLog.predict[9000000]
plot(log(y)~x1, xlab="Density",ylab="Log Gain")
densityLog.seq = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE),length.out=90000)
densityLog.predict=densityLogFit$coefficients[1]+densityLogFit$coefficients[2]*densityLog.seq
lines(densityLog.seq,densityLog.predict)
stdErrors = coef(summary(densityLogFit))[, 2]
intercept.ci <- densityLogFit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=densityLogFit$df.residual)
x1.ci <- densityLogFit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=densityLogFit$df.residual)
densityLog.predict.upper = intercept.ci[1]+x1.ci[1]*densityLog.seq
lines(densityLog.seq,densityLog.predict.upper, col="red")
densityLog.predict.lower = intercept.ci[2]+x1.ci[2]*densityLog.seq
lines(densityLog.seq,densityLog.predict.lower, col="red")
idpu = exp(densityLog.predict)-densityLogFit$coefficients[1]/densityLogFit$coefficients[2]
idpu1 = exp(densityLog.predict.upper)-intercept.ci[1]/x1.ci[1]
idpu2 = exp(densityLog.predict.lower)-intercept.ci[2]/x1.ci[2]
your.number = 38.6
densityLog.seq[which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))]
densityLog.seq[which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))]
your.number = 426.7
which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))
which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))
densityLog.seq[which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))]
densityLog.seq[which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))]
densityLog.seq
min(x1,na.rm = TRUE)
max(x1,na.rm = TRUE)
densityLog.predict
max(densityLog.predict,na.rm=TRUE)
max(idpu1,na.rm=TRUE)
plot(log(y)~x1, xlab="Density",ylab="Log Gain")
densityLog.seq = seq(from=max(x1,na.rm = TRUE),to=0.0000000001,length.out=90000)
densityLog.predict=densityLogFit$coefficients[1]+densityLogFit$coefficients[2]*densityLog.seq
lines(densityLog.seq,densityLog.predict)
stdErrors = coef(summary(densityLogFit))[, 2]
intercept.ci <- densityLogFit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=densityLogFit$df.residual)
x1.ci <- densityLogFit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=densityLogFit$df.residual)
densityLog.predict.upper = intercept.ci[1]+x1.ci[1]*densityLog.seq
lines(densityLog.seq,densityLog.predict.upper, col="red")
densityLog.predict.lower = intercept.ci[2]+x1.ci[2]*densityLog.seq
lines(densityLog.seq,densityLog.predict.lower, col="red")
idpu = exp(densityLog.predict)-densityLogFit$coefficients[1]/densityLogFit$coefficients[2]
idpu1 = exp(densityLog.predict.upper)-intercept.ci[1]/x1.ci[1]
idpu2 = exp(densityLog.predict.lower)-intercept.ci[2]/x1.ci[2]
your.number = 38.6
densityLog.seq[which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))]
densityLog.seq[which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))]
your.number = 426.7
which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))
which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))
densityLog.seq[which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))]
densityLog.seq[which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))]
max(idpu1,na.rm=TRUE)
densityLog.seq = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE),length.out=90000)
densityLog.predict=densityLogFit$coefficients[1]+densityLogFit$coefficients[2]*densityLog.seq
lines(densityLog.seq,densityLog.predict)
plot(log(y)~x1, xlab="Density",ylab="Log Gain")
densityLog.seq = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE),length.out=90000)
densityLog.predict=densityLogFit$coefficients[1]+densityLogFit$coefficients[2]*densityLog.seq
lines(densityLog.seq,densityLog.predict)
stdErrors = coef(summary(densityLogFit))[, 2]
intercept.ci <- densityLogFit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=densityLogFit$df.residual)
x1.ci <- densityLogFit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=densityLogFit$df.residual)
densityLog.predict.upper = intercept.ci[1]+x1.ci[1]*densityLog.seq
lines(densityLog.seq,densityLog.predict.upper, col="red")
densityLog.predict.lower = intercept.ci[2]+x1.ci[2]*densityLog.seq
lines(densityLog.seq,densityLog.predict.lower, col="red")
png("Log Plot.png", units="in", height = 10, width = 15, res=300)
plot(log(y)~x1, xlab="Density",ylab="Log Gain", main="Log Transformed Gain Regression Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5)
lines(densityLog.seq,densityLog.predict)
lines(densityLog.seq,densityLog.predict.upper, col="red")
lines(densityLog.seq,densityLog.predict.lower, col="red")
dev.off()
densityLog.seq = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE),length.out=90000)
densityLog.predict=densityLogFit$coefficients[1]+densityLogFit$coefficients[2]*densityLog.seq
stdErrors = coef(summary(densityLogFit))[, 2]
intercept.ci <- densityLogFit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=densityLogFit$df.residual)
x1.ci <- densityLogFit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=densityLogFit$df.residual)
densityLog.predict.upper = intercept.ci[1]+x1.ci[1]*densityLog.seq
densityLog.predict.lower = intercept.ci[2]+x1.ci[2]*densityLog.seq
log(y)
y
densityLog.seq = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE),length.out=90000)
densityLog.seq
densityLog.seq = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE)/100,length.out=90000)
densityLog.predict=densityLogFit$coefficients[1]+densityLogFit$coefficients[2]*densityLog.seq
stdErrors = coef(summary(densityLogFit))[, 2]
densityLog.predict.upper
your.number = 2.63
which(abs(densityLog.predict.upper-your.number)==min(abs(densityLog.predict.upper-your.number)))
which(abs(densityLog.predict.lower-your.number)==min(abs(densityLog.predict.lower-your.number)))
densityLog.seq[which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))]
densityLog.seq[which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))]
densityLog.seq[which(abs(densityLog.predict.upper-your.number)==min(abs(densityLog.predict.upper-your.number)))]
densityLog.seq[which(abs(densityLog.predict.lower-your.number)==min(abs(densityLog.predict.lower-your.number)))]
your.number = 2.63
which(abs(densityLog.predict.upper-your.number)==min(abs(densityLog.predict.upper-your.number)))
which(abs(densityLog.predict.lower-your.number)==min(abs(densityLog.predict.lower-your.number)))
densityLog.seq[which(abs(densityLog.predict.upper-your.number)==min(abs(densityLog.predict.upper-your.number)))]
densityLog.seq[which(abs(densityLog.predict.lower-your.number)==min(abs(densityLog.predict.lower-your.number)))]
densityLog.predict
x1 <- data$density
y <- data$gain
densityLogFit <- lm(log(y)~x1)
summary(densityLogFit)
densityLog.seq = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE)/100,length.out=90000)
densityLog.predict=densityLogFit$coefficients[1]+densityLogFit$coefficients[2]*densityLog.seq
stdErrors = coef(summary(densityLogFit))[, 2]
intercept.ci <- densityLogFit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=densityLogFit$df.residual)
x1.ci <- densityLogFit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=densityLogFit$df.residual)
densityLog.predict.upper = intercept.ci[1]+x1.ci[1]*densityLog.seq
densityLog.predict.lower = intercept.ci[2]+x1.ci[2]*densityLog.seq
your.number = 2.63
which(abs(densityLog.predict.upper-your.number)==min(abs(densityLog.predict.upper-your.number)))
which(abs(densityLog.predict.lower-your.number)==min(abs(densityLog.predict.lower-your.number)))
densityLog.seq[which(abs(densityLog.predict.upper-your.number)==min(abs(densityLog.predict.upper-your.number)))]
densityLog.seq[which(abs(densityLog.predict.lower-your.number)==min(abs(densityLog.predict.lower-your.number)))]
idpu = exp(densityLog.predict)-densityLogFit$coefficients[1]/densityLogFit$coefficients[2]
idpu1 = exp(densityLog.predict.upper)-intercept.ci[1]/x1.ci[1]
idpu2 = exp(densityLog.predict.lower)-intercept.ci[2]/x1.ci[2]
your.number = 38.6
densityLog.seq[which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))]
densityLog.seq[which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))]
your.number = 426.7
which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))
which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))
densityLog.seq[which(abs(idpu1-your.number)==min(abs(idpu1-your.number)))]
densityLog.seq[which(abs(idpu2-your.number)==min(abs(idpu2-your.number)))]
max(idpu1,na.rm=TRUE)
png("Inverse Plot.png", units="in", height = 10, width = 15, res=300)
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
lines(idpu,densityLog.seq, col="black")
lines(idpu1,densityLog.seq, col="red")
lines(idpu2,densityLog.seq, col="red")
dev.off()
densityLog.seq = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE)/100,length.out=90000)
densityLog.seq
input
density = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE)/100,length.out=90000)
density
density[89000]
density[90000]
loggain.target = 2.63
loggain
x1 <- data$density
y <- data$gain
y[x1==0.508] <-NA
x1[x1==0.508] <-NA
logfit <- lm(log(y)~x1)
summary(logfit)
density = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE)/100,length.out=90000)
loggain=logfit$coefficients[1]+logfit$coefficients[2]*density
stdErrors = coef(summary(logfit))[, 2]
intercept.ci <- logfit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=logfit$df.residual)
x1.ci <- logfit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=logfit$df.residual)
loggain.upper = intercept.ci[1]+x1.ci[1]*density
loggain.lower = intercept.ci[2]+x1.ci[2]*density
loggain.target = 2.63
which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))
which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))
density[which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))]
density[which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))]
loggain
loggain[90000]
loggain[1]
density = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE)/100000000000,length.out=90000)
loggain=logfit$coefficients[1]+logfit$coefficients[2]*density
stdErrors = coef(summary(logfit))[, 2]
intercept.ci <- logfit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=logfit$df.residual)
x1.ci <- logfit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=logfit$df.residual)
loggain.upper = intercept.ci[1]+x1.ci[1]*density
loggain.lower = intercept.ci[2]+x1.ci[2]*density
loggain.target = 2.63
which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))
which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))
density[which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))]
density[which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))]
png("Log Plot.png", units="in", height = 10, width = 15, res=300)
gain.target = 426.7
which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))
which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
loggain.target = 2.63
which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))
which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))
min(loggain.upper)
max(loggain.upper)
min(loggain.upper)
which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))
min(loggain.lower)
density = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE)/10000000000000000000,length.out=90000)
loggain=logfit$coefficients[1]+logfit$coefficients[2]*density
stdErrors = coef(summary(logfit))[, 2]
intercept.ci <- logfit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=logfit$df.residual)
x1.ci <- logfit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=logfit$df.residual)
loggain.upper = intercept.ci[1]+x1.ci[1]*density
loggain.lower = intercept.ci[2]+x1.ci[2]*density
loggain.target = 2.63
which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))
min(loggain.upper)
which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))
min(loggain.lower)
density[which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))]
density[which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))]
density
min(density)
density = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE),length.out=90000)
loggain=logfit$coefficients[1]+logfit$coefficients[2]*density
stdErrors = coef(summary(logfit))[, 2]
intercept.ci <- logfit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=logfit$df.residual)
x1.ci <- logfit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=logfit$df.residual)
loggain.lower = intercept.ci[2]+x1.ci[2]*density
loggain.upper = intercept.ci[1]+x1.ci[1]*density
loggain.target = 2.63
which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))
which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))
min(loggain.lower)
density[which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))]
density[which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))]
png("Log Plot.png", units="in", height = 10, width = 15, res=300)
plot(log(y)~x1, xlab="Density",ylab="Log Gain", main="Log Transformed Gain Regression Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5)
lines(density,loggain)
lines(density,loggain.upper, col="red")
lines(density,loggain.lower, col="red")
dev.off()
density = 0.001#seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE),length.out=90000)
loggain=logfit$coefficients[1]+logfit$coefficients[2]*density
stdErrors = coef(summary(logfit))[, 2]
intercept.ci <- logfit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=logfit$df.residual)
x1.ci <- logfit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=logfit$df.residual)
loggain.upper = intercept.ci[1]+x1.ci[1]*density
loggain.lower = intercept.ci[2]+x1.ci[2]*density
loggain
exp(loggain)
which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))
which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))
min(loggain.lower)
density[which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))]
density[which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))]
png("Log Plot.png", units="in", height = 10, width = 15, res=300)
density = 0.508#seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE),length.out=90000)
loggain=logfit$coefficients[1]+logfit$coefficients[2]*density
stdErrors = coef(summary(logfit))[, 2]
intercept.ci <- logfit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=logfit$df.residual)
x1.ci <- logfit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=logfit$df.residual)
loggain.upper = intercept.ci[1]+x1.ci[1]*density
loggain.lower = intercept.ci[2]+x1.ci[2]*density
loggain.upper
loggain.lower
idpu = exp(loggain)-logfit$coefficients[1]/logfit$coefficients[2]
idpu1 = exp(loggain.upper)-intercept.ci[1]/x1.ci[1]
idpu2 = exp(loggain.lower)-intercept.ci[2]/x1.ci[2]
gain.target = 38.6
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
gain.target = 426.7
which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))
which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
max(idpu1,na.rm=TRUE)
idpu = exp(loggain)-logfit$coefficients[1]/logfit$coefficients[2]
idpu1 = exp(loggain.upper)-intercept.ci[1]/x1.ci[1]
idpu
idpu1
idpu2
density = 0.001#seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE),length.out=90000)
loggain=logfit$coefficients[1]+logfit$coefficients[2]*density
stdErrors = coef(summary(logfit))[, 2]
intercept.ci <- logfit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=logfit$df.residual)
x1.ci <- logfit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=logfit$df.residual)
loggain.upper = intercept.ci[1]+x1.ci[1]*density
loggain.lower = intercept.ci[2]+x1.ci[2]*density
loggain.target = 2.63
which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))
which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))
min(loggain.lower)
density[which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))]
density[which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))]
png("Log Plot.png", units="in", height = 10, width = 15, res=300)
plot(log(y)~x1, xlab="Density",ylab="Log Gain", main="Log Transformed Gain Regression Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5)
lines(density,loggain)
lines(density,loggain.upper, col="red")
lines(density,loggain.lower, col="red")
dev.off()
idpu = exp(loggain)-logfit$coefficients[1]/logfit$coefficients[2]
idpu1 = exp(loggain.upper)-intercept.ci[1]/x1.ci[1]
idpu2 = exp(loggain.lower)-intercept.ci[2]/x1.ci[2]
gain.target = 38.6
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
gain.target = 426.7
which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))
which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
max(idpu1,na.rm=TRUE)
png("Inverse Plot.png", units="in", height = 10, width = 15, res=300)
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
dev.off()
loggain
exp(loggain)
loggain.upper = intercept.ci[1]+x1.ci[1]*density
loggain.lower = intercept.ci[2]+x1.ci[2]*density
loggain.upper
exp(loggain.upper)
exp(loggain.lower)
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
grid(100,100)
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
grid(20,20)
png("Inverse Plot.png", units="in", height = 10, width = 15, res=300)
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
grid(20,20)
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
png("Inverse Plot.png", units="in", height = 10, width = 15, res=300)
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
grid(20,20)
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
dev.off()
png("Inverse Plot.png", units="in", height = 10, width = 15, res=300)
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
grid(20,20)
dev.off()
png("Inverse Plot.png", units="in", height = 10, width = 15, res=300)
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
dev.off()
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
idpu = exp(loggain)-logfit$coefficients[1]/logfit$coefficients[2]
x1 <- data$density
x1 <- data$density
y <- data$gain
logfit <- lm(log(y)~x1)
summary(logfit)
density = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE),length.out=90000)
loggain=logfit$coefficients[1]+logfit$coefficients[2]*density
stdErrors = coef(summary(logfit))[, 2]
intercept.ci <- logfit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=logfit$df.residual)
x1.ci <- logfit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=logfit$df.residual)
loggain.upper = intercept.ci[1]+x1.ci[1]*density
loggain.lower = intercept.ci[2]+x1.ci[2]*density
loggain.target = 2.63
which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))
which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))
min(loggain.lower)
density[which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))]
density[which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))]
png("Log Plot.png", units="in", height = 10, width = 15, res=300)
plot(log(y)~x1, xlab="Density",ylab="Log Gain", main="Log Transformed Gain Regression Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5)
lines(density,loggain)
lines(density,loggain.upper, col="red")
lines(density,loggain.lower, col="red")
dev.off()
idpu = exp(loggain)-logfit$coefficients[1]/logfit$coefficients[2]
idpu1 = exp(loggain.upper)-intercept.ci[1]/x1.ci[1]
idpu2 = exp(loggain.lower)-intercept.ci[2]/x1.ci[2]
gain.target = 38.6
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
gain.target = 426.7
which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))
which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
max(idpu1,na.rm=TRUE)
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
png("Inverse Plot.png", units="in", height = 10, width = 15, res=300)
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
dev.off()
png("Inverse Plot.png", units="in", height = 10, width = 15, res=300)
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
grid(20,20)
dev.off()
png("Inverse Plot.png", units="in", height = 10, width = 15, res=300)
plot(x1~y, xlab="Gain",ylab="Density", main="Look-Up Graph of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
grid(20,20)
dev.off()
png("Inverse Plot.png", units="in", height = 10, width = 15, res=300)
plot(x1~y, xlab="Gain",ylab="Density", main="Look-Up Graph of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
grid(20,20, lwd=2)
dev.off()
png("Inverse Plot.png", units="in", height = 10, width = 15, res=300)
plot(x1~y, xlab="Gain",ylab="Density", main="Look-Up Graph of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
grid(40,40, lwd=2.5)
dev.off()
idpu = exp(loggain-logfit$coefficients[1])/logfit$coefficients[2]
idpu1 = exp(loggain.upper-intercept.ci[1])/x1.ci[1]
idpu2 = exp(loggain.lower-intercept.ci[2])/x1.ci[2]
gain.target = 38.6
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
gain.target = 426.7
which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))
which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
max(idpu1,na.rm=TRUE)
plot(x1~y, xlab="Gain",ylab="Density", main="Inverse Plot of Logarithmic Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5) # this is the plot we ultimately want
lines(idpu,density, col="black")
lines(idpu1,density, col="red")
lines(idpu2,density, col="red")
gain.target = 38.6
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
density = seq(from=max(x1,na.rm = TRUE),to=min(x1,na.rm = TRUE),length.out=90000)
loggain=logfit$coefficients[1]+logfit$coefficients[2]*density
stdErrors = coef(summary(logfit))[, 2]
intercept.ci <- logfit$coefficients[1]+c(-1,1)*(stdErrors[1])*qt(.975, df=logfit$df.residual)
x1.ci <- logfit$coefficients[2]+c(-1,1)*(stdErrors[2])*qt(.975, df=logfit$df.residual)
loggain.upper = intercept.ci[1]+x1.ci[1]*density
loggain.lower = intercept.ci[2]+x1.ci[2]*density
loggain.target = 2.63
which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))
which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))
min(loggain.lower)
density[which(abs(loggain.upper-loggain.target)==min(abs(loggain.upper-loggain.target)))]
density[which(abs(loggain.lower-loggain.target)==min(abs(loggain.lower-loggain.target)))]
png("Log Plot.png", units="in", height = 10, width = 15, res=300)
plot(log(y)~x1, xlab="Density",ylab="Log Gain", main="Log Transformed Gain Regression Model", cex.main=1.5, cex.lab=1.5, cex.axis=1.5)
lines(density,loggain)
lines(density,loggain.upper, col="red")
lines(density,loggain.lower, col="red")
dev.off()
idpu = exp(loggain)-logfit$coefficients[1]/logfit$coefficients[2]
idpu1 = exp(loggain.upper)-intercept.ci[1]/x1.ci[1]
idpu2 = exp(loggain.lower)-intercept.ci[2]/x1.ci[2]
idpu = exp(loggain-logfit$coefficients[1])/logfit$coefficients[2]
idpu1 = exp(loggain.upper-intercept.ci[1])/x1.ci[1]
idpu2 = exp(loggain.lower-intercept.ci[2])/x1.ci[2]
gain.target = 38.6
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
gain.target = 38.6
which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))
which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
gain.target = 426.7
which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))
which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))
density[which(abs(idpu1-gain.target)==min(abs(idpu1-gain.target)))]
density[which(abs(idpu2-gain.target)==min(abs(idpu2-gain.target)))]
idpu1
min(idpu1)
max(idpu1)
