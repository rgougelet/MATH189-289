cwd("C:\Users\Rob\Documents\MATH189-289\Homework 3")
cwd("C:\\Users\\Rob\\Documents\\MATH189-289\\Homework 3")
setwd("C:\\Users\\Rob\\Documents\\MATH189-289\\Homework 3")
data <- read.table("videodata.txt", header = TRUE)
data <- read.table("hcmv.txt", header = TRUE)
diff(data)
diff_data <- diff(data)
View(diff_data)
diff_data <- diff(data,2)
?diff
diff_data <- diff(data.location)
data.location
diff_data <- diff(data$location)
?hist
hist(diff_data)
Distance <- diff(data$location)
setwd("C:\\Users\\Rob\\Documents\\MATH189-289\\Homework 3")
data <- read.table("hcmv.txt", header = TRUE)
Distance <- diff(data$location)
hist(Distance)
hist(Distance, main="Distance between Palindromes")
hist(Distance, main="Distance Between Palindromes")
sum(Distance==0)
sum(Distance==1)
Distance==1
sum(Distance<10)
?hist
hist(Distance, main="Distance Between Palindromes", breaks = 100)
?hist
?qpois
hist(Distance, main="Distance Between Palindromes", prob=TRUE, breaks = 100)
?lines
lines(density(X), col="blue", lwd=2)
hist(Distance, main="Distance Between Palindromes", prob=TRUE, breaks = 100)
lines(density(Distance), col="blue", lwd=2)
?density
sum(Distance<10)
hist(Distance, main="Distance Between Palindromes", prob=TRUE, breaks = 100)
hist(data$location, main="Distance Between Palindromes", prob=TRUE, breaks = 100)
hist(data$location, main="Palindromes", prob=TRUE, breaks = 100)
data <- read.table("hcmv.txt", header = TRUE)
pals <- data$location
hist(pals, main="Palindromes", prob=TRUE, breaks = 100)
Distance <- diff(data$location)
hist(Distance, main="Distance Between Palindromes", prob=TRUE, breaks = 100)
lines(density(Distance), col="blue", lwd=2)
hist(pals, main="Palindromes", prob=TRUE, breaks = 100)
lines(density(Distance), col="blue", lwd=2)
lines(density(pals), col="blue", lwd=2)
library(lattice)
stripplot(pals, pch=16, cex=0.25)
stripplot(Distance, pch=16, cex=0.25)
Palindromes <- data$location
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 100)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 200)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 300)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 300)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 200)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 100)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 200)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 300)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 500)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 100)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 200)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 50)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 100)
hist(Palindromes, main="Palindromes", prob=TRUE, breaks = 200)
hist(Palindromes, main="Palindromes on DNA sequence", prob=TRUE, breaks = 50)
Locations <- data$location
hist(Locations, main="Palindromes on DNA sequence", prob=TRUE, breaks = 50)
hist(Locations, main="Palindromes on DNA sequence", prob=TRUE, breaks = 100)
hist(Locations, main="Palindromes on DNA sequence", prob=TRUE, breaks = 200)
hist(Locations, main="Palindromes on DNA sequence", breaks = 50)
Location <- data$location
hist(Location, main="Palindromes on DNA sequence", breaks = 50)
hist(Location, main="Palindromes on DNA sequence", breaks = 100)
hist(Location, main="Palindromes on DNA sequence", breaks = 200)
lines(density(pals), col="blue", lwd=2)
Distance <- diff(data$location)
hist(Distance, main="Distance Between Palindromes", prob=TRUE, breaks = 100)
lines(density(Distance), col="blue", lwd=2)
hist(Location, main="Palindromes on DNA sequence", breaks = 50)
lines(density(Location), col="blue", lwd=2)
hist(Location, main="Palindromes on DNA sequence", breaks = 50)
hist(Location, main="Palindromes on DNA sequence", breaks = 100)
hist(Location, main="Palindromes on DNA sequence", breaks = 200)
hist(Location, main="Palindromes on DNA sequence", breaks = 50)
hist(Location, main="Palindromes on DNA sequence", breaks = 100)
hist(Location, main="Palindromes on DNA sequence", breaks = 200)
Distance <- diff(data$location)
hist(Distance, main="Distance Between Palindromes", prob=TRUE, breaks = 100)
hist(Distance, main="Distance Between Palindromes", prob=TRUE, breaks = 200)
hist(Distance, main="Distance Between Palindromes", prob=TRUE, breaks = 50)
stripplot(Location, pch=16, cex=0.25)
?stripplot
stripplot(Location, pch=16, cex=0.25)
Distance <- diff(data$location)
Simulated <- sample.int(N, size=n)
gene <- seq(1, N)
N <- 200000
n <- 300
gene <- seq(1, N)
gene
Simulated <- sample.int(N, size=n)
Simulated
UniformSimulated <- sample.int(N, size=n) #Uniform
stripplot(UniformSimulated, pch=16, cex=0.25)
stripplot(Location, main="Palindromes on DNA sequence" pch=16, cex=0.25)
stripplot(Location, main="Palindromes on DNA sequence", pch=16, cex=0.25)
stripplot(Location, main="Occurrence of Palindromes on DNA sequence", pch=16, cex=0.25)
stripplot(Distance, main="Distance Between Palindromes on DNA sequence", pch=16, cex=0.25)
stripplot(UniformSimulated,main="Occurrence of Palindromes on DNA sequence", pch=16, cex=0.25)
N <- 200000
n <- 300
Locations <- seq(1, N)
SampleLocations <- seq(1, N)
norm.quant
library(lattice)
norm.quant <- seq(-3, 3, length.out=N)
site.norm <- sample.int(N, size=n, prob=dnorm(norm.quant))
norm.quant
library(lattice)
ZLocations <- seq(-3, 3, length.out=N)
site.norm <- sample.int(N, size=n, prob=dnorm(ZLocations))
NormalSimulated <- sample.int(N, size=n, prob=dnorm(ZLocations))
NormalSimulated
NormalSimulated <- sample.int(N, size=n, prob=dnorm(ZLocations))
stripplot(NormalSimulated,main="Occurrence of Palindromes on DNA sequence", pch=16, cex=0.25)
DoubleLocations <- sample.int(N, size=30)
Weights <- rep(0.5, N)
DoubleLocations <- sample.int(N, size=30)
Weights <- rep(0.5, N)
Weights[DoubleLocations] <- Weights[DoubleLocations] + 0.5
set.seed(215)
DoubleSimulated <- sample.int(N, size=n, prob=gene.weight)
DoubleLocations <- sample.int(N, size=30)
Weights <- rep(0.5, N)
Weights[DoubleLocations] <- Weights[DoubleLocations] + 0.5
DoubleSimulated <- sample.int(N, size=n, prob=Weights)
regionsplit <- function(n.region, gene, site){
count.int <- table(cut(site, breaks = seq(1, length(gene), length.out=n.region+1), include.lowest=TRUE))
count.vector <- as.vector(count.int)
count.tab <- table(count.vector)
return (count.tab)
}
regionsplit <- function(numOfRegions, refSeq, site){ #number of regions, reference sequence, simulated sequence
count.int <- table(cut(site, breaks = seq(1, length(refSeq), length.out=numOfRegions+1), include.lowest=TRUE))
count.vector <- as.vector(count.int)
count.tab <- table(count.vector)
return (count.tab)
}
regionsplit(50, IntLocations, DoubleSimulated)
N <- 200000
n <- 300
IntLocations <- seq(1, N)
UniformSimulated <- sample.int(N, size=n) #Uniform
stripplot(UniformSimulated,main="Occurrence of Palindromes on DNA sequence", pch=16, cex=0.25)
library(lattice)
ZLocations <- seq(-3, 3, length.out=N)
NormalSimulated <- sample.int(N, size=n, prob=dnorm(ZLocations))
stripplot(NormalSimulated,main="Occurrence of Palindromes on DNA sequence", pch=16, cex=0.25)
DoubleLocations <- sample.int(N, size=30)
Weights <- rep(0.5, N)
Weights[DoubleLocations] <- Weights[DoubleLocations] + 0.5
DoubleSimulated <- sample.int(N, size=n, prob=Weights)
regionsplit <- function(numOfRegions, refSeq, site){ #number of regions, reference sequence, simulated sequence
count.int <- table(cut(site, breaks = seq(1, length(refSeq), length.out=numOfRegions+1), include.lowest=TRUE))
count.vector <- as.vector(count.int)
count.tab <- table(count.vector)
return (count.tab)
}
regionsplit(50, IntLocations, DoubleSimulated)
regionsplit(50, IntLocations, NormalSimulated)
regionsplit(50, IntLocations, UniformSimulated)
regionsplit(50, IntLocations, NormalSimulated)
regionsplit(50, IntLocations, DoubleSimulated)
regionsplit(50, IntLocations, UniformSimulated)
regionsplit(50, IntLocations, NormalSimulated)
regionsplit(50, IntLocations, DoubleSimulated)
regionsplit(10, IntLocations, UniformSimulated)
regionsplit(10, IntLocations, NormalSimulated)
regionsplit(10, IntLocations, DoubleSimulated)
regionsplit(10, IntLocations, DoubleSimulated)
regionsplit(11, IntLocations, DoubleSimulated)
regionsplit(100, IntLocations, UniformSimulated)
retu = regionsplit(100, IntLocations, UniformSimulated)
retu
regionsplit(100, IntLocations, UniformSimulated)
regionsplit <- function(numOfRegions, refSeq, site){ #number of regions, reference sequence, simulated sequence
count.int <- table(cut(site, breaks = seq(1, length(refSeq), length.out=numOfRegions+1), include.lowest=TRUE))
count.vector <- as.vector(count.int)
count.tab <- table(count.vector)
return (count.tab)
}
regionsplit(100, IntLocations, UniformSimulated)
regionsplit(10, IntLocations, NormalSimulated)
regionsplit(11, IntLocations, DoubleSimulated)
source('~/MATH189-289/Homework 3/Homework_3.R')
regionsplit(100, IntLocations, UniformSimulated)
count.int
?cut
count.vector
count.tab <- table(count.vector)
count.tab
regionsplit(100, IntLocations, UniformSimulated)
regionsplit(100, IntLocations, UniformSimulated)
regionsplit <- function(numOfRegions, refSeq, site){ #number of regions, reference sequence, simulated sequence
count.int <- table(cut(site, breaks = seq(1, length(refSeq), length.out=numOfRegions+1), include.lowest=TRUE))
count.vector <- as.vector(count.int)
count.tab <- table(count.vector)
return (count.tab)
}
source('~/MATH189-289/Homework 3/Homework_3.R')
regionsplit(100, IntLocations, UniformSimulated)
regionsplit(2, IntLocations, UniformSimulated)
regionsplit(3, IntLocations, UniformSimulated)
regionsplit(4, IntLocations, UniformSimulated)
regionsplit(5, IntLocations, UniformSimulated)
regionsplit(10, IntLocations, NormalSimulated)
regionsplit(5, IntLocations, UniformSimulated)
regionsplit(6, IntLocations, UniformSimulated)
regionsplit(7, IntLocations, UniformSimulated)
regionsplit(1000, IntLocations, UniformSimulated)
regionsplit <- function(numOfRegions, refSeq, site){ #number of regions, reference sequence, simulated sequence
count.int <- table(cut(site, breaks = seq(1, length(refSeq), length.out=numOfRegions+1), include.lowest=TRUE))
count.vector <- as.vector(count.int)
count.tab <- table(count.vector)
count.tab
return (count.tab)
}
regionsplit(1000, IntLocations, UniformSimulated)
regionsplit <- function(numOfRegions, refSeq, site){ #number of regions, reference sequence, simulated sequence
count.int <- table(cut(site, breaks = seq(1, length(refSeq), length.out=numOfRegions+1), include.lowest=TRUE))
count.vector <- as.vector(count.int)
count.vector
count.tab <- table(count.vector)
count.tab
return (count.tab)
}
regionsplit(1000, IntLocations, UniformSimulated)
regionsplit <- function(numOfRegions, refSeq, site){ #number of regions, reference sequence, simulated sequence
count.int <- table(cut(site, breaks = seq(1, length(refSeq), length.out=numOfRegions+1), include.lowest=TRUE))
count.vector <- as.vector(count.int)
count.vector
count.tab <- table(count.vector)
count.tab
return (count.tab)
}
regionsplit(1000, IntLocations, UniformSimulated)
regionsplit(4, IntLocations, UniformSimulated)
regionsplit(3, IntLocations, UniformSimulated)
regionsplit(2, IntLocations, UniformSimulated)
regionsplit(1, IntLocations, UniformSimulated)
?cut
cut(DoubleSimulated)
cut(DoubleSimulated, breaks=50)
table(cut(DoubleSimulated))
table(cut(DoubleSimulated, breaks=50))
table(cut(DoubleSimulated, breaks=10))
min(DoubleSimulated)
range(DoubleSimulated)
regionsplit(n, IntLocations, UniformSimulated)
seq(1, length(DoubleSimulated), length.out=numOfRegions+1)
seq(1, length(DoubleSimulated), length.out=50)
length(DoubleSimulated)
length(IntLocations)
seq(1, length(IntLocations), length.out=50)
IntBreaks <- seq(1, length(IntLocations), length.out=50)
nBreaks = 50
IntBreaks <- seq(1, length(IntLocations), length.out=nBreaks)
IntBreaks
cut(DoubleSimulated,breaks=IntBreaks, include.lowest = TRUE)
table(cut(DoubleSimulated,breaks=IntBreaks, include.lowest = TRUE))
as.vector((cut(DoubleSimulated,breaks=IntBreaks, include.lowest = TRUE)))
as.vector(table(cut(DoubleSimulated,breaks=IntBreaks, include.lowest = TRUE)))
table(as.vector(table(cut(DoubleSimulated,breaks=IntBreaks, include.lowest = TRUE))))
as.vector(table(cut(DoubleSimulated,breaks=IntBreaks, include.lowest = TRUE)))
as.vector(table(cut(DoubleSimulated,breaks=IntBreaks, include.lowest = TRUE)))
?table
